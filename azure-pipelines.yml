# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job:                'Build_Test_Ubuntu'
  pool:
    vmImage:          'ubuntu-16.04'
  strategy:
    maxParallel:      4
    matrix:
      # Python35:
      #   python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'


  steps:
  - task:             UsePythonVersion@0
    inputs:
      versionSpec:    '$(python.version)'
      architecture:   'x64'

  - script:           |
      python -m pip install --upgrade
      pip install pipreqs
      pipreqs src
      cat src/requirements.txt
      pip install -r src/requirements.txt --upgrade
    displayName:      'Install dependencies'

  - script:           |
      cd src
      make test
    displayName:      'pytest'


- job:                  'Build_Test_Upload_macOS'
  pool:
    vmImage:            'macOS-10.13'
  strategy:
    matrix:
      # Python35:
      #   python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel:        4

  steps:
  - task:               UsePythonVersion@0
    inputs:
      versionSpec:      '$(python.version)'
      architecture:     'x64'

  - script:             |
      mkdir -p ~/.matplotlib
      touch ~/.matplotlib/matplotlibrc
      echo "backend:    TkAgg" >> ~/.matplotlib/matplotlibrc
      python -m pip install --upgrade pip
      pip install pipreqs
      pipreqs src
      cat src/requirements.txt
      pip install -r src/requirements.txt
    displayName:        'Install dependencies'

  - script:             |
      cd src
      make test
    displayName:        'pytest'

  - task: TwineAuthenticate@0
    inputs:
      # artifactFeeds: 'feed_name1, feed_name2'
      externalFeeds: 'PyPI'

  - script:  |
      pip3 install twine wheel
      cd src
      make
      twine upload -r SuPy --config-file $(PYPIRC_PATH) --skip-existing dist/*whl
    displayName:        'upload supy'
    continueOnError:    true


- job:                  'Build_Test_Windows'
  pool:
    vmImage:            'vs2017-win2016'
  strategy:
    matrix:
      # Python35:
      #   python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel:        4

  steps:
  - task:               UsePythonVersion@0
    inputs:
      versionSpec:      '$(python.version)'
      architecture:     'x64'

  - bash:               |
      python -m pip install --upgrade pip
      pip install pipreqs
      pipreqs src
      pip install -r src/requirements.txt
    displayName:        'Install dependencies'

  - bash:               |
      cd src
      make test
    displayName:        'pytest'
  #
  # - task:             PublishTestResults@2
  #   inputs:
  #     testResultsFiles: '**/test-results.xml'
  #     testRunTitle:   'Python $(python.version)'
  #   condition:        succeededOrFailed()

- job:                  'Build_Test_Docs'
  dependsOn:            'Build_Test_Ubuntu'
  pool:
    vmImage:            'Ubuntu 16.04'
  strategy:
    matrix:
      # Python35:
      #   python.version: '3.5'
      Python36:
        python.version: '3.6'
      # Python37:
      #   python.version: '3.7'
    maxParallel:        4

  steps:
  - task:               UsePythonVersion@0
    inputs:
      versionSpec:      '$(python.version)'
      architecture:     'x64'

  - script:             |
      python -m pip install --upgrade pip
      pip install pipreqs
      cd docs
      sudo apt-get install pandoc
      make html
    displayName:        'test docs'

# - job:                  'Upload_macOS'
#   pool:
#     vmImage:            'macOS-10.13'
#   strategy:
#     matrix:
#       # Python35:
#       #   python.version: '3.5'
#       # Python36:
#       #   python.version: '3.6'
#       Python37:
#         python.version: '3.7'
#     maxParallel:        2

#   steps:
#   - task:               UsePythonVersion@0
#     inputs:
#       versionSpec:      '$(python.version)'
#       architecture:     'x64'

#   - script:             |
#       mkdir -p ~/.matplotlib
#       touch ~/.matplotlib/matplotlibrc
#       echo "backend:    TkAgg" >> ~/.matplotlib/matplotlibrc
#       python -m pip install --upgrade pip
#       pip install pipreqs
#       pipreqs src
#       pip install -r src/requirements.txt
#     displayName:        'Install dependencies'

#   - script:             |
#       cd src
#       make test
#     displayName:        'pytest'

#   # Python Twine Upload Authenticate
#   # Authentication for uploading Python distributions using twine.
#   # Please add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command.
#   # For feeds present in this organization, use the feed name as the repository (-r).
#   # Otherwise, use the endpoint name defined in the service connection.
#   - task: TwineAuthenticate@0
#     inputs:
#       # artifactFeeds: 'feed_name1, feed_name2'
#       externalFeeds: 'PyPI'

#   - script:  |
#       pip3 install twine wheel
#       cd src
#       make
#       cat $(PYPIRC_PATH)
#       twine upload -r SuPy --config-file $(PYPIRC_PATH) --skip-existing dist/*whl
#     displayName:        'upload supy'
#     continueOnError:    true

